/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ogre;

import java.io.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
/**
 *
 * @author skot
 */
public class RegisterFrame extends javax.swing.JFrame {

    /**
     * Creates new form RegisterFrame
     */
    public RegisterFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailTextField = new javax.swing.JTextField();
        usernameTextField = new javax.swing.JTextField();
        confirmEmailTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        feedbackTextArea = new javax.swing.JTextArea();
        passwordTextField = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        confirmPasswordTextField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OGRE :: NEW USER REGISTRATION");
        setResizable(false);

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Register New User");

        jLabel2.setText("Email Address");

        jLabel3.setText("Username");

        jLabel4.setText("Password");

        jLabel5.setText("Confirm Email Address");

        registerButton.setText("REGISTER");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        feedbackTextArea.setEditable(false);
        feedbackTextArea.setColumns(20);
        feedbackTextArea.setRows(5);
        feedbackTextArea.setText("Usernames must be at least 3 and fewer than 20\ncharacters long.\nPasswords must be at least 5 and fewer than 10\ncharacters long.");
        feedbackTextArea.setFocusable(false);
        jScrollPane1.setViewportView(feedbackTextArea);

        jLabel6.setText("Confirm Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmEmailTextField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(registerButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(emailTextField)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(confirmPasswordTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(usernameTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(3, 3, 3)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        
        Socket sckt = null;
        InputStream in = null;
        OutputStream out = null;
        ObjectOutputStream objectOut = null;
        ObjectInputStream objectIn = null;
        
        /*  Perform basic checks:
            -- ensure there is text in each field
            -- ensure that username and password fields meet minimum characters
            -- ensure that the mail address provided is formatted as an email address (includes @ .com, etc)
            -- check that both email fields match
        */
        feedbackTextArea.append("\n");
        
        boolean goodToGo = true;
        
        //Empty fields
        if ((emailTextField.getText().equals("")) || (confirmEmailTextField.getText().equals("")) ||
                (usernameTextField.getText().equals("")) || (passwordTextField.getText().equals("")))
        {
            feedbackTextArea.append("ERROR: Please complete all registration fields.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //username too long/short
        if ((usernameTextField.getText().length() < 3) || (usernameTextField.getText().length() > 20))
        {
            feedbackTextArea.append("ERROR: provided USERNAME is either too short or too long. C'mon.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //password too long/short
        if (((passwordTextField.getPassword().length < 5)) || (passwordTextField.getPassword().length > 10))
        {
            feedbackTextArea.append("ERROR: provided PASSWORD is either too short or too long. Geez.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //passwords don't match
        //TODO: is this secure?
        String pw1 = new String(passwordTextField.getPassword());
        String pw2 = new String(confirmPasswordTextField.getPassword());
        if (!pw1.equals(pw2))
        {
            feedbackTextArea.append("ERROR: provided PASSWORD do not match.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //emails don't match
        if (!emailTextField.getText().equals(confirmEmailTextField.getText()))
        {
            feedbackTextArea.append("ERROR: provided EMAIL mismatch.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //email doesn't contain @
        if (!emailTextField.getText().contains(new String("@")))
        {
            feedbackTextArea.append("ERROR: invalid EMAIL");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        //email doesn't contain a TLD of com/net/org
        if (!((emailTextField.getText().contains(".com")) || (emailTextField.getText().contains(".net")) 
                || (emailTextField.getText().contains(".org"))))
        {
            feedbackTextArea.append("ERROR: only .com, .net. or .org TLDs are currently accepted. Sorry.");
            feedbackTextArea.append("\n");
            goodToGo = false;
        }
        
        
        //Connect to the Ogre Server and attempt to authenticate
        if (goodToGo)
        {
            feedbackTextArea.setText("");
            feedbackTextArea.append("Connecting to server...");
            feedbackTextArea.append("\n");
            
            //Generate a loginObject
            TransportObject loginObj = new TransportObject(usernameTextField.getText(), pw1, emailTextField.getText(), true, true);
            
            
            try
            {
                sckt = new Socket("127.0.1.1", 12321);

                //Acquitre input and ouput streams
                in = sckt.getInputStream();
                out = sckt.getOutputStream();
                objectOut = new ObjectOutputStream(out);
                objectIn = new ObjectInputStream(in);

                feedbackTextArea.append("Found a server...\n");

            }
        
            catch(java.io.IOException e)
            {
                feedbackTextArea.append("ERROR: NO SERVER FOUND\n");
            }
            
            //Push out a loginMessage
            if ((sckt != null) && (objectOut != null))
            {
                try
                {   
                    objectOut.writeObject(loginObj);
                }
                
                catch(java.io.IOException e)
                {
                    
                }
                
                //Prepare to wait for answer from the server
                boolean answerReceived = false;
                
                loginObj = null;
                
                if (objectIn != null)
                {
                    //TODO: add a time out
                    while (answerReceived == false)
                    {
                        try
                        {
                            loginObj = (TransportObject)objectIn.readObject();
                        }
                        catch (ClassNotFoundException | IOException e)
                        {

                        }

                        if (loginObj != null)
                        {
                            feedbackTextArea.append(loginObj.message);
                            answerReceived = true;
                        }
                    }
                }
            }
            
        }    
        
    }//GEN-LAST:event_registerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField confirmEmailTextField;
    private javax.swing.JPasswordField confirmPasswordTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextArea feedbackTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
